"""Tests for tasks related creating and updating datasets in Tamr"""
import pytest

from tamr_toolbox.data_io import create_dataset
from tamr_toolbox.data_io.attribute_type import PrimitiveType, ArrayType
from tamr_toolbox import utils

from tamr_toolbox.utils.testing import mock_api
from tests._common import get_toolbox_root_dir

# A valid password is not needed for offline tests, some value must be provided
CONFIG = utils.config.from_yaml(
    get_toolbox_root_dir() / "tests/mocking/resources/toolbox_test.yaml"
)

@mock_api()
def test_create_new_dataset():
    client = utils.client.create(**CONFIG["toolbox_test_instance"])
    dataset_name = "test_create_dataset"
    attributes = ["unique_id", "name", "address"]
    pk = ("unique_id")
    description = "My test dataset"
    
    _ = create_dataset.create_maybe(
        tamr = client, 
        dataset_name = dataset_name , 
        attributes = attributes,
        primary_keys = pk,
        description = description,
    )

    dataset = client.datasets.by_resource_id(dataset_name)

    assert dataset.description == description

    dataset_attributes = dataset.attributes
    attribute_list = [
        attribute.name for attribute in dataset_attributes.stream()
    ]
    attribute_types= [
        attribute.type for attribute in dataset_attributes.stream()
    ]

    assert len(attribute_list) == len(attributes)
    assert attribute_list == attributes
    assert attribute_types == [
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
    ]


@mock_api()
def test_add_attribute_and_description():
    client = utils.client.create(**CONFIG["toolbox_test_instance"])
    dataset_name = "test_create_dataset"
    attributes = ["unique_id", "name", "address", "phone"]
    pk = ("unique_id")
    description = "My test dataset with phone"
    
    dataset = create_dataset.create_maybe(
        tamr = client, 
        dataset_name = dataset_name , 
        attributes = attributes,
        primary_keys = pk,
        description = description,
    )

    dataset = client.datasets.by_resource_id(dataset_name)

    assert dataset.description == description

    dataset_attributes = dataset.attributes
    attribute_list = [
        attribute.name for attribute in dataset_attributes.stream()
    ]

    assert len(attribute_list) == len(attributes)
    assert attribute_list == attributes

@mock_api()
def test_remmove_attribute():
    client = utils.client.create(**CONFIG["toolbox_test_instance"])
    dataset_name = "test_create_dataset"
    attributes = ["unique_id", "name", "address"]
    pk = ("unique_id")
    description = "My test dataset without phone"
    
    dataset = create_dataset.create_maybe(
        tamr = client, 
        dataset_name = dataset_name , 
        attributes = attributes,
        primary_keys = pk,
        description = description,
    )

    dataset = client.datasets.by_resource_id(dataset_name)

    assert dataset.description == description

    dataset_attributes = dataset.attributes
    attribute_list = [
        attribute.name for attribute in dataset_attributes.stream()
    ]

    assert len(attribute_list) == len(attributes)
    assert attribute_list == attributes

@mock_api()
def test_add_non_default_attribute():
    client = utils.client.create(**CONFIG["toolbox_test_instance"])
    dataset_name = "test_create_dataset"
    attributes = ["unique_id", "name", "address", "user_id"]
    attribute_types = ["STRING", "STRING", "STRING", "INT"]
    attribute_types = [ArrayType(atype) for atype in attribute_types]
    pk = ("unique_id")
    description = "My test dataset with user int ids"
    
    dataset = create_dataset.create_maybe(
        tamr = client, 
        dataset_name = dataset_name , 
        attributes = attributes,
        primary_keys = pk,
        description = description,
    )

    dataset = client.datasets.by_resource_id(dataset_name)

    assert dataset.description == description

    dataset_attributes = dataset.attributes
    attribute_list = [
        attribute.name for attribute in dataset_attributes.stream()
    ]
    attribute_types= [
        attribute.type for attribute in dataset_attributes.stream()
    ]

    assert len(attribute_list) == len(attributes)
    assert attribute_list == attributes
    assert attribute_types == [
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "INT"}}
    ]

@mock_api()
def test_add_primitive_attribute():
    client = utils.client.create(**CONFIG["toolbox_test_instance"])
    dataset_name = "test_create_dataset"
    attributes = ["unique_id", "name", "address", "user_id", "account_number"]
    attribute_types = [ArrayType("STRING"), ArrayType("STRING"), ArrayType("STRING"), ArrayType("INT"), PrimitiveType("INT")]
    pk = ("unique_id")
    description = "My test dataset with user int ids"
    
    dataset = create_dataset.create_maybe(
        tamr = client, 
        dataset_name = dataset_name , 
        attributes = attributes,
        primary_keys = pk,
        description = description,
    )

    dataset = client.datasets.by_resource_id(dataset_name)

    assert dataset.description == description

    dataset_attributes = dataset.attributes
    attribute_list = [
        attribute.name for attribute in dataset_attributes.stream()
    ]
    attribute_types= [
        attribute.type for attribute in dataset_attributes.stream()
    ]

    assert len(attribute_list) == len(attributes)
    assert attribute_list == attributes
    assert attribute_types == [
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "STRING"}}, 
        {"baseType": "ARRAY", "innerType": {"baseType": "INT"}},
        {"baseType": "INT"}
    ]


@mock_api()
def test_missing_primary_key():
    client = utils.client.create(**CONFIG["toolbox_test_instance"])
    dataset_name = "test_create_dataset"
    attributes = ["unique_id", "name", "address", "user_id", "account_number"]
    attribute_types = [ArrayType("STRING"), ArrayType("STRING"), ArrayType("STRING"), ArrayType("INT"), PrimitiveType("INT")]
    pk = ("unique_id")
    description = "My test dataset with user int ids"
    
    with pytest.raises(KeyError):
        dataset = create_dataset.create_maybe(
            tamr = client, 
            dataset_name = dataset_name , 
            attributes = attributes,
            primary_keys = pk,
            description = description,
        )



# @mock_api()
# def test_different_primary_key():
#     client = utils.client.create(**CONFIG["toolbox_test_instance"])
#     # TBD: throw error? can we check the PK?

# @mock_api()
# def test_change_attribute_type():
#     client = utils.client.create(**CONFIG["toolbox_test_instance"])
#     # TBD: throw error? TC only offers updates to description of attribute

# @mock_api()
# def test_no_new_updates():
#     client = utils.client.create(**CONFIG["toolbox_test_instance"])
#     # TBD: throw error? return dataset as is?




